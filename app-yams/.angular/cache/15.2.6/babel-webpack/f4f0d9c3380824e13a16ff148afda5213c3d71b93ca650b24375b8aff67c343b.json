{"ast":null,"code":"import { FormGroup, Validators } from '@angular/forms';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/forms\";\nimport * as i2 from \"../pastries.service\";\nimport * as i3 from \"@angular/router\";\nexport class UpdatePastrieComponent {\n  constructor(fb, ps, router, route) {\n    this.fb = fb;\n    this.ps = ps;\n    this.router = router;\n    this.route = route;\n    this.pastrieForm = new FormGroup({});\n  }\n  ngOnInit() {\n    this.pastrieForm = this.fb.group({\n      name: ['', Validators.required],\n      ref: ['', Validators.required],\n      description: ['', Validators.required],\n      url: ['', Validators.required],\n      quantity: ['', Validators.required],\n      order: ['', Validators.required],\n      like: ['', Validators.required],\n      tags: ['', Validators.required],\n      choice: ['', Validators.required]\n    });\n    this.route.params.subscribe(params => {\n      this.pastrieId = params['id'];\n      this.ps.getRecipe(this.pastrieId).subscribe(pastrie => {\n        this.pastrie = pastrie;\n        // Mettre à jour les valeurs du formulaire avec les données de la pâtisserie\n        this.pastrieForm.patchValue({\n          name: pastrie.name,\n          ref: pastrie.ref,\n          description: pastrie.description,\n          url: pastrie.url,\n          quantity: pastrie.quantity,\n          order: pastrie.order,\n          like: pastrie.like,\n          tags: pastrie.tags,\n          choice: pastrie.choice\n        });\n      });\n    });\n  }\n  updatePastrie() {\n    if (this.pastrieForm.valid) {\n      const formData = this.pastrieForm.value;\n      this.ps.updatePastrie(formData).subscribe(() => {\n        this.router.navigate(['/pastries']);\n      });\n    }\n  }\n}\nUpdatePastrieComponent.ɵfac = function UpdatePastrieComponent_Factory(t) {\n  return new (t || UpdatePastrieComponent)(i0.ɵɵdirectiveInject(i1.FormBuilder), i0.ɵɵdirectiveInject(i2.PastriesService), i0.ɵɵdirectiveInject(i3.Router), i0.ɵɵdirectiveInject(i3.ActivatedRoute));\n};\nUpdatePastrieComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: UpdatePastrieComponent,\n  selectors: [[\"app-update-pastrie\"]],\n  decls: 15,\n  vars: 2,\n  consts: [[3, \"ngSubmit\"], [\"type\", \"text\", \"name\", \"name\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"text\", \"name\", \"ref\", \"required\", \"\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\"]],\n  template: function UpdatePastrieComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"p\");\n      i0.ɵɵtext(1, \"update-pastrie works!\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(2, \"h2\");\n      i0.ɵɵtext(3, \"Modifier la p\\u00E2tisserie\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(4, \"form\", 0);\n      i0.ɵɵlistener(\"ngSubmit\", function UpdatePastrieComponent_Template_form_ngSubmit_4_listener() {\n        return ctx.updatePastrie();\n      });\n      i0.ɵɵelementStart(5, \"div\")(6, \"label\");\n      i0.ɵɵtext(7, \"Nom:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(8, \"input\", 1);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdatePastrieComponent_Template_input_ngModelChange_8_listener($event) {\n        return ctx.pastrie.name = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(9, \"div\")(10, \"label\");\n      i0.ɵɵtext(11, \"R\\u00E9f\\u00E9rence:\");\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(12, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function UpdatePastrieComponent_Template_input_ngModelChange_12_listener($event) {\n        return ctx.pastrie.ref = $event;\n      });\n      i0.ɵɵelementEnd()();\n      i0.ɵɵelementStart(13, \"button\", 3);\n      i0.ɵɵtext(14, \"Mettre \\u00E0 jour\");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      i0.ɵɵadvance(8);\n      i0.ɵɵproperty(\"ngModel\", ctx.pastrie.name);\n      i0.ɵɵadvance(4);\n      i0.ɵɵproperty(\"ngModel\", ctx.pastrie.ref);\n    }\n  },\n  dependencies: [i1.ɵNgNoValidate, i1.DefaultValueAccessor, i1.NgControlStatus, i1.NgControlStatusGroup, i1.RequiredValidator, i1.NgModel, i1.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"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","names":["FormGroup","Validators","UpdatePastrieComponent","constructor","fb","ps","router","route","ngOnInit","pastrieForm","group","name","required","ref","description","url","quantity","order","like","tags","choice","params","subscribe","pastrieId","getRecipe","pastrie","patchValue","updatePastrie","valid","formData","value","navigate","selectors","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/richardmelanie/Desktop/patisserie/Pastries/app-yams/src/app/update-pastrie/update-pastrie.component.ts","/Users/richardmelanie/Desktop/patisserie/Pastries/app-yams/src/app/update-pastrie/update-pastrie.component.html"],"sourcesContent":["import { Component, OnInit } from '@angular/core';\nimport { ActivatedRoute, Router } from '@angular/router';\nimport { PastriesService } from '../pastries.service';\nimport { Pastrie } from '../pastrie';\nimport { FormBuilder, FormGroup, Validators } from '@angular/forms';\n\n@Component({\n  selector: 'app-update-pastrie',\n  templateUrl: './update-pastrie.component.html',\n  styleUrls: ['./update-pastrie.component.scss']\n})\nexport class UpdatePastrieComponent implements OnInit {\n  pastrieForm: FormGroup = new FormGroup({});\n  pastrieId: string;\n  pastrie: Pastrie;\n\n  constructor(\n    private fb: FormBuilder,\n    private ps: PastriesService,\n    private router: Router,\n    private route: ActivatedRoute\n  ) {}\n\n  ngOnInit(): void {\n    this.pastrieForm = this.fb.group({\n      name: ['', Validators.required],\n      ref: ['', Validators.required],\n      description: ['', Validators.required],\n      url: ['', Validators.required],\n      quantity: ['', Validators.required],\n      order: ['', Validators.required],\n      like: ['', Validators.required],\n      tags: ['', Validators.required],\n      choice: ['', Validators.required]\n    });\n\n    this.route.params.subscribe(params => {\n      this.pastrieId = params['id'];\n      this.ps.getRecipe(this.pastrieId).subscribe(pastrie => {\n        this.pastrie = pastrie;\n        // Mettre à jour les valeurs du formulaire avec les données de la pâtisserie\n        this.pastrieForm.patchValue({\n          name: pastrie.name,\n          ref: pastrie.ref,\n          description: pastrie.description,\n          url: pastrie.url,\n          quantity: pastrie.quantity,\n          order: pastrie.order,\n          like: pastrie.like,\n          tags: pastrie.tags,\n          choice: pastrie.choice\n        });\n      });\n    });\n  }\n\n  updatePastrie(): void {\n    if (this.pastrieForm.valid) {\n      const formData = this.pastrieForm.value;\n      this.ps.updatePastrie(formData).subscribe(() => {\n        this.router.navigate(['/pastries']);\n      });\n    }\n  }\n}","<p>update-pastrie works!</p>\n<h2>Modifier la pâtisserie</h2>\n\n<form (ngSubmit)=\"updatePastrie()\">\n  <div>\n    <label>Nom:</label>\n    <input type=\"text\" [(ngModel)]=\"pastrie.name\" name=\"name\" required>\n  </div>\n  <div>\n    <label>Référence:</label>\n    <input type=\"text\" [(ngModel)]=\"pastrie.ref\" name=\"ref\" required>\n  </div>\n  <!-- Ajoutez d'autres champs ici pour les autres propriétés de la pâtisserie -->\n  \n  <button type=\"submit\">Mettre à jour</button>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}