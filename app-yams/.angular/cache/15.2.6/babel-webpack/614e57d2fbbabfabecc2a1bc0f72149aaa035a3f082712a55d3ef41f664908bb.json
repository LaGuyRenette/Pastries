{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Component, Input } from '@angular/core';\nlet PastrieSampleComponent = class PastrieSampleComponent {\n  constructor(ps, router, route) {\n    this.ps = ps;\n    this.router = router;\n    this.route = route;\n    this.pastries = [];\n    this.selectedPastrieId = null;\n    this.selectedPastrie = null;\n  }\n  ngOnInit() {\n    this.ps.getPastries().subscribe(pastries => {\n      this.pastries = pastries;\n    });\n    this.route.queryParams.subscribe(params => {\n      const pastryParam = params['pastry'];\n      if (pastryParam) {\n        try {\n          this.pastries = JSON.parse(pastryParam);\n        } catch (error) {\n          console.error('Error parsing pastry JSON:', error);\n        }\n      }\n    });\n  }\n  navigateToCreatePastries() {\n    this.router.navigateByUrl('/createPastrie');\n  }\n  toggleCard(pastrieId) {\n    if (this.selectedPastrieId === pastrieId) {\n      this.selectedPastrieId = null; // Ferme la card si elle est déjà ouverte\n    } else {\n      this.selectedPastrieId = pastrieId; // Ouvre la card de la pâtisserie sélectionnée\n      this.ps.getRecipe(pastrieId).subscribe(selectedPastrie => {\n        this.selectedPastrie = selectedPastrie; // Assigner la pâtisserie sélectionnée à la variable selectedPastrie\n      });\n    }\n  }\n\n  getPastriePropertyValue(pastrie, property) {\n    if (pastrie instanceof Pastrie) {\n      return pastrie[property];\n    }\n    return '';\n  }\n};\n__decorate([Input()], PastrieSampleComponent.prototype, \"pastries\", void 0);\nPastrieSampleComponent = __decorate([Component({\n  selector: 'app-pastrie-sample',\n  templateUrl: './pastrie-sample.component.html',\n  styleUrls: ['./pastrie-sample.component.scss']\n})], PastrieSampleComponent);\nexport { PastrieSampleComponent };","map":{"version":3,"mappings":";AAAA,SAASA,SAAS,EAAEC,KAAK,QAAQ,eAAe;AAUzC,IAAMC,sBAAsB,GAA5B,MAAMA,sBAAsB;EAKjCC,YAAoBC,EAAmB,EAAUC,MAAc,EAAUC,KAAqB;IAA1E,OAAE,GAAFF,EAAE;IAA2B,WAAM,GAANC,MAAM;IAAkB,UAAK,GAALC,KAAK;IAJrE,aAAQ,GAAc,EAAE;IACjC,sBAAiB,GAAkB,IAAI;IACvC,oBAAe,GAAmB,IAAI;EAE2D;EAEjGC,QAAQ;IACN,IAAI,CAACH,EAAE,CAACI,WAAW,EAAE,CAACC,SAAS,CAACC,QAAQ,IAAG;MACzC,IAAI,CAACA,QAAQ,GAAGA,QAAQ;IAC1B,CAAC,CAAC;IAEF,IAAI,CAACJ,KAAK,CAACK,WAAW,CAACF,SAAS,CAAEG,MAAM,IAAI;MAC1C,MAAMC,WAAW,GAAGD,MAAM,CAAC,QAAQ,CAAC;MACpC,IAAIC,WAAW,EAAE;QACf,IAAI;UACF,IAAI,CAACH,QAAQ,GAAGI,IAAI,CAACC,KAAK,CAACF,WAAW,CAAC;SACxC,CAAC,OAAOG,KAAK,EAAE;UACdC,OAAO,CAACD,KAAK,CAAC,4BAA4B,EAAEA,KAAK,CAAC;;;IAGxD,CAAC,CAAC;EAEJ;EACAE,wBAAwB;IACtB,IAAI,CAACb,MAAM,CAACc,aAAa,CAAC,gBAAgB,CAAC;EAC7C;EAEAC,UAAU,CAACC,SAAiB;IAC1B,IAAI,IAAI,CAACC,iBAAiB,KAAKD,SAAS,EAAE;MACxC,IAAI,CAACC,iBAAiB,GAAG,IAAI,CAAC,CAAC;KAChC,MAAM;MACL,IAAI,CAACA,iBAAiB,GAAGD,SAAS,CAAC,CAAC;MACpC,IAAI,CAACjB,EAAE,CAACmB,SAAS,CAACF,SAAS,CAAC,CAACZ,SAAS,CAACe,eAAe,IAAG;QACvD,IAAI,CAACA,eAAe,GAAGA,eAAe,CAAC,CAAC;MAC1C,CAAC,CAAC;;EAEN;;EACAC,uBAAuB,CAACC,OAAY,EAAEC,QAAgB;IACpD,IAAID,OAAO,YAAYE,OAAO,EAAE;MAC9B,OAAOF,OAAO,CAACC,QAAQ,CAAC;;IAE1B,OAAO,EAAE;EACX;CACD;AA3CUE,YAAR5B,KAAK,EAAE,wDAA0B;AADvBC,sBAAsB,eALlCF,SAAS,CAAC;EACT8B,QAAQ,EAAE,oBAAoB;EAC9BC,WAAW,EAAE,iCAAiC;EAC9CC,SAAS,EAAE,CAAC,iCAAiC;CAC9C,CAAC,GACW9B,sBAAsB,CA4ClC;SA5CYA,sBAAsB","names":["Component","Input","PastrieSampleComponent","constructor","ps","router","route","ngOnInit","getPastries","subscribe","pastries","queryParams","params","pastryParam","JSON","parse","error","console","navigateToCreatePastries","navigateByUrl","toggleCard","pastrieId","selectedPastrieId","getRecipe","selectedPastrie","getPastriePropertyValue","pastrie","property","Pastrie","__decorate","selector","templateUrl","styleUrls"],"sourceRoot":"","sources":["/Users/richardmelanie/Desktop/patisserie/Pastries/app-yams/src/app/pastrie-sample/pastrie-sample.component.ts"],"sourcesContent":["import { Component, Input } from '@angular/core';\nimport { Pastrie } from '../pastrie';\nimport { PastriesService } from '../pastries.service';\nimport { ActivatedRoute, Router } from '@angular/router';\n\n@Component({\n  selector: 'app-pastrie-sample',\n  templateUrl: './pastrie-sample.component.html',\n  styleUrls: ['./pastrie-sample.component.scss']\n})\nexport class PastrieSampleComponent {\n  @Input() pastries: Pastrie[] = [];\n  selectedPastrieId: string | null = null;\n  selectedPastrie: Pastrie | null = null;\n\n  constructor(private ps: PastriesService, private router: Router, private route: ActivatedRoute) {}\n\n  ngOnInit(): void {\n    this.ps.getPastries().subscribe(pastries => {\n      this.pastries = pastries;\n    });\n\n    this.route.queryParams.subscribe((params) => {\n      const pastryParam = params['pastry'];\n      if (pastryParam) {\n        try {\n          this.pastries = JSON.parse(pastryParam);\n        } catch (error) {\n          console.error('Error parsing pastry JSON:', error);\n        }\n      }\n    });\n\n  }\n  navigateToCreatePastries(): void {\n    this.router.navigateByUrl('/createPastrie');\n  }\n\n  toggleCard(pastrieId: string): void {\n    if (this.selectedPastrieId === pastrieId) {\n      this.selectedPastrieId = null; // Ferme la card si elle est déjà ouverte\n    } else {\n      this.selectedPastrieId = pastrieId; // Ouvre la card de la pâtisserie sélectionnée\n      this.ps.getRecipe(pastrieId).subscribe(selectedPastrie => {\n        this.selectedPastrie = selectedPastrie; // Assigner la pâtisserie sélectionnée à la variable selectedPastrie\n      });\n    }\n  }\n  getPastriePropertyValue(pastrie: any, property: string): string {\n    if (pastrie instanceof Pastrie) {\n      return pastrie[property];\n    }\n    return '';\n  }\n}"]},"metadata":{},"sourceType":"module","externalDependencies":[]}