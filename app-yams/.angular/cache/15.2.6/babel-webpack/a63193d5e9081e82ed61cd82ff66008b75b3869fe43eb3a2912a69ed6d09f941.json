{"ast":null,"code":"import { HttpHeaders } from '@angular/common/http';\nimport { Subject, map } from 'rxjs';\nimport { environment } from '../environments/environment.development';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\nexport class PastriesService {\n  constructor(http) {\n    this.http = http;\n    this.pastriesUrl = `${environment.urlApi}/pastries`;\n    this.ingredientsListsUrl = `${environment.urlApi}/ingredientsLists`;\n    this.pastriesUrlOrderQuantity = `${environment.urlApi}/pastries/order-quantity`;\n    this.searchPastriesUrl = `${environment.urlApi}/pastries-search`;\n    this.pastriesUrlCount = `${environment.urlApi}/pastries-count`;\n    this.numberPastries = 0;\n    this.currentPage = new Subject();\n  }\n  getPastries() {\n    return this.http.get(this.pastriesUrl, httpOptions).pipe(map(pastries => pastries.sort((a, b) => b.quantity - a.quantity)));\n  }\n  search(word) {\n    return this.http.get(this.searchPastriesUrl + `/${word}`, httpOptions);\n  }\n  paginate(start, end) {\n    return this.http.get(this.pastriesUrlOrderQuantity + `/${start}/${end}`, httpOptions);\n  }\n  count() {\n    return this.http.get(this.pastriesUrlCount, httpOptions);\n  }\n  setCurrentPage(page) {\n    // observer\n    this.currentPage.next(page); // next du subject notifie à l'observable\n  }\n\n  getCurrentPage() {\n    // observable\n    return this.currentPage;\n  }\n  getRecipe(recipeId) {\n    const url = `${this.pastriesUrl}/${recipeId}`;\n    return this.http.get(url, httpOptions);\n  }\n  addOrUpdateRecipe(recipe) {\n    if (recipe.id) {\n      // Utilisé put pour update recipe qui a déja un id\n      const url = `${this.pastriesUrl}/${recipe.id}`;\n      return this.http.put(url, recipe, httpOptions);\n    } else {\n      // si il n'y a pas déja d'id post permet de l'inclure \n      return this.http.post(this.pastriesUrl, recipe, httpOptions);\n    }\n  }\n  deleteRecipe(recipeId) {\n    const url = `${this.pastriesUrl}/${recipeId}`;\n    return this.http.delete(url, httpOptions);\n  }\n}\nPastriesService.ɵfac = function PastriesService_Factory(t) {\n  return new (t || PastriesService)(i0.ɵɵinject(i1.HttpClient));\n};\nPastriesService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: PastriesService,\n  factory: PastriesService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["HttpHeaders","Subject","map","environment","httpOptions","headers","PastriesService","constructor","http","urlApi","getPastries","get","pastriesUrl","pipe","pastries","sort","a","b","quantity","search","word","searchPastriesUrl","paginate","start","end","pastriesUrlOrderQuantity","count","pastriesUrlCount","setCurrentPage","page","currentPage","next","getCurrentPage","getRecipe","recipeId","url","addOrUpdateRecipe","recipe","id","put","post","deleteRecipe","delete","factory","providedIn"],"sourceRoot":"","sources":["/Users/richardmelanie/Desktop/patisserie/app-yams/src/app/pastries.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable, Subject, map } from 'rxjs';\nimport { Pastrie } from './pastrie';\nimport {environment} from '../environments/environment.development'\n\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json',\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class PastriesService {\n  private pastriesUrl = `${environment.urlApi}/pastries`;\n  private ingredientsListsUrl = `${environment.urlApi}/ingredientsLists`;\n  private pastriesUrlOrderQuantity = `${environment.urlApi}/pastries/order-quantity`;\n  private searchPastriesUrl = `${environment.urlApi}/pastries-search`;\n  private pastriesUrlCount = `${environment.urlApi}/pastries-count`;\n  private numberPastries: number = 0;\n  private currentPage: Subject<number> = new Subject<number>();\n\n  constructor(private http: HttpClient) {\n  }\n\n  getPastries(): Observable<Pastrie[]> {\n\n    return this.http.get<Pastrie[]>(this.pastriesUrl, httpOptions).pipe(\n      map((pastries: Pastrie[]) => pastries.sort((a, b) => b.quantity - a.quantity))\n    )\n  }\n\n  search(word: string): Observable<Pastrie[]> {\n\n    return this.http.get<Pastrie[]>(this.searchPastriesUrl + `/${word}`, httpOptions);\n  }\n\n  paginate(start: number, end: number): Observable<Pastrie[]> {\n\n    return this.http.get<Pastrie[]>(this.pastriesUrlOrderQuantity + `/${start}/${end}`, httpOptions);\n  }\n\n  count(): Observable<number> {\n    return this.http.get<number>(this.pastriesUrlCount , httpOptions);\n  }\n\n  setCurrentPage(page: number) {\n    // observer\n    this.currentPage.next(page); // next du subject notifie à l'observable\n  }\n\n  getCurrentPage(): Subject<number> {\n    // observable\n    return this.currentPage;\n  }\n\n  getRecipe(recipeId: string): Observable<Pastrie> {\n    const url = `${this.pastriesUrl}/${recipeId}`;\n    return this.http.get<Pastrie>(url, httpOptions);\n  }\n  \n  addOrUpdateRecipe(recipe: Pastrie): Observable<Pastrie> {\n    if (recipe.id) {\n      // Utilisé put pour update recipe qui a déja un id\n      const url = `${this.pastriesUrl}/${recipe.id}`;\n      return this.http.put<Pastrie>(url, recipe, httpOptions);\n    } else {\n      // si il n'y a pas déja d'id post permet de l'inclure \n      return this.http.post<Pastrie>(this.pastriesUrl, recipe, httpOptions);\n    }\n  }\n  deleteRecipe(recipeId: string): Observable<void> {\n    const url = `${this.pastriesUrl}/${recipeId}`;\n    return this.http.delete<void>(url, httpOptions);\n  }\n}\n\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}