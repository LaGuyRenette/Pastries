{"ast":null,"code":"import { EventEmitter } from '@angular/core';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"../pastries.service\";\nimport * as i2 from \"@angular/forms\";\nexport class SearchComponent {\n  constructor(ps) {\n    this.ps = ps;\n    this.word = '';\n    this.searchPastries = new EventEmitter();\n  }\n  // onSubmit(form: NgForm) {\n  //   const word = form.value.word;\n  //   const pastries: Pastrie[] = this.ps.search(word);\n  //   this.searchPastries.emit(pastries)\n  // }\n  onChangeEmit(w) {\n    this.ps.search(w).subscribe(pastries => {\n      this.searchPastries.emit(pastries);\n    });\n  }\n  onReload() {\n    this.word = \"\";\n    this.ps.getPastries().subscribe(pastries => this.searchPastries.emit(pastries));\n  }\n}\nSearchComponent.ɵfac = function SearchComponent_Factory(t) {\n  return new (t || SearchComponent)(i0.ɵɵdirectiveInject(i1.PastriesService));\n};\nSearchComponent.ɵcmp = /*@__PURE__*/i0.ɵɵdefineComponent({\n  type: SearchComponent,\n  selectors: [[\"app-search\"]],\n  outputs: {\n    searchPastries: \"searchPastries\"\n  },\n  decls: 5,\n  vars: 2,\n  consts: [[1, \"form-inline\", \"my-2\", \"my-lg-0\", \"d-inline-flex\"], [\"formSearch\", \"ngForm\"], [\"type\", \"search\", \"placeholder\", \"Search\", \"aria-label\", \"Search\", \"name\", \"word\", \"required\", \"\", 1, \"form-control\", \"mr-sm-2\", 3, \"ngModel\", \"ngModelChange\"], [\"type\", \"submit\", 1, \"btn\", \"btn-outline-danger\", \"my-2\", \"my-sm-0\", \"m-4\", 3, \"disabled\", \"click\"]],\n  template: function SearchComponent_Template(rf, ctx) {\n    if (rf & 1) {\n      i0.ɵɵelementStart(0, \"form\", 0, 1)(2, \"input\", 2);\n      i0.ɵɵlistener(\"ngModelChange\", function SearchComponent_Template_input_ngModelChange_2_listener($event) {\n        return ctx.word = $event;\n      })(\"ngModelChange\", function SearchComponent_Template_input_ngModelChange_2_listener($event) {\n        return ctx.onChangeEmit($event);\n      });\n      i0.ɵɵelementEnd();\n      i0.ɵɵelementStart(3, \"button\", 3);\n      i0.ɵɵlistener(\"click\", function SearchComponent_Template_button_click_3_listener() {\n        return ctx.onReload();\n      });\n      i0.ɵɵtext(4, \" reload \");\n      i0.ɵɵelementEnd()();\n    }\n    if (rf & 2) {\n      const _r0 = i0.ɵɵreference(1);\n      i0.ɵɵadvance(2);\n      i0.ɵɵproperty(\"ngModel\", ctx.word);\n      i0.ɵɵadvance(1);\n      i0.ɵɵproperty(\"disabled\", _r0.invalid);\n    }\n  },\n  dependencies: [i2.ɵNgNoValidate, i2.DefaultValueAccessor, i2.NgControlStatus, i2.NgControlStatusGroup, i2.RequiredValidator, i2.NgModel, i2.NgForm],\n  styles: [\"\\n/*# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbXSwibmFtZXMiOltdLCJtYXBwaW5ncyI6IiIsInNvdXJjZVJvb3QiOiIifQ== */\"]\n});","map":{"version":3,"mappings":"AAAA,SAAoBA,YAAY,QAAgB,eAAe;;;;AAU/D,OAAM,MAAOC,eAAe;EAK1BC,YAAoBC,EAAmB;IAAnB,OAAE,GAAFA,EAAE;IAHtB,SAAI,GAAW,EAAE;IACP,mBAAc,GAA4B,IAAIH,YAAY,EAAE;EAE3B;EAE3C;EACA;EACA;EAEA;EACA;EAEAI,YAAY,CAACC,CAAS;IACpB,IAAI,CAACF,EAAE,CAACG,MAAM,CAACD,CAAC,CAAC,CAACE,SAAS,CAACC,QAAQ,IAAG;MACrC,IAAI,CAACC,cAAc,CAACC,IAAI,CAACF,QAAQ,CAAC;IACpC,CAAC,CAAC;EACJ;EAEAG,QAAQ;IACN,IAAI,CAACC,IAAI,GAAG,EAAE;IACd,IAAI,CAACT,EAAE,CAACU,WAAW,EAAE,CAACN,SAAS,CAACC,QAAQ,IAAI,IAAI,CAACC,cAAc,CAACC,IAAI,CAACF,QAAQ,CAAC,CAAC;EAEjF;;AAxBWP,eAAe;mBAAfA,eAAe;AAAA;AAAfA,eAAe;QAAfA,eAAe;EAAAa;EAAAC;IAAAN;EAAA;EAAAO;EAAAC;EAAAC;EAAAC;IAAA;MCV5BC,kCAA2E;MAGnEA;QAAA;MAAA,EAAkB;QAAA,OAEDC,wBAAoB;MAAA,EAFnB;MAFtBD,iBAKM;MAENA,iCAKK;MADGA;QAAA,OAASC,cAAU;MAAA,EAAC;MAExBD,wBACJ;MAAAA,iBAAS;;;;MAZLA,eAAkB;MAAlBA,kCAAkB;MAMdA,eAA+B;MAA/BA,sCAA+B","names":["EventEmitter","SearchComponent","constructor","ps","onChangeEmit","w","search","subscribe","pastries","searchPastries","emit","onReload","word","getPastries","selectors","outputs","decls","vars","consts","template","i0","ctx"],"sourceRoot":"","sources":["/Users/richardmelanie/Desktop/patisserie/app-yams/src/app/search/search.component.ts","/Users/richardmelanie/Desktop/patisserie/app-yams/src/app/search/search.component.html"],"sourcesContent":["import { Component, EventEmitter, Output } from '@angular/core';\nimport { PastriesService } from '../pastries.service';\nimport { NgForm, NgModel } from '@angular/forms';\nimport { Pastrie } from '../pastrie';\n\n@Component({\n  selector: 'app-search',\n  templateUrl: './search.component.html',\n  styleUrls: ['./search.component.scss']\n})\nexport class SearchComponent {\n\n  word: string = '';\n  @Output() searchPastries: EventEmitter<Pastrie[]> = new EventEmitter();\n\n  constructor(private ps: PastriesService) { }\n\n  // onSubmit(form: NgForm) {\n  //   const word = form.value.word;\n  //   const pastries: Pastrie[] = this.ps.search(word);\n\n  //   this.searchPastries.emit(pastries)\n  // }\n\n  onChangeEmit(w: string) {\n    this.ps.search(w).subscribe(pastries => {\n      this.searchPastries.emit(pastries)\n    })\n  }\n\n  onReload() {\n    this.word = \"\";\n    this.ps.getPastries().subscribe(pastries => this.searchPastries.emit(pastries));\n\n  }\n}\n","<form class=\"form-inline my-2 my-lg-0 d-inline-flex\"  #formSearch=\"ngForm\">\n    <input class=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\" \n        name=\"word\"\n        [(ngModel)]=\"word\" \n        required \n        (ngModelChange)=\"onChangeEmit($event)\" \n        />\n\n    <button \n            [disabled]=\"formSearch.invalid\" \n            class=\"btn btn-outline-danger my-2 my-sm-0 m-4\" \n            type=\"submit\"\n            (click)=\"onReload()\"\n        >\n        reload\n    </button>\n</form>"]},"metadata":{},"sourceType":"module","externalDependencies":[]}